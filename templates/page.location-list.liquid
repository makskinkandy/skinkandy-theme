<div class="container">
    <div class="sidebar">
        <h1>Store Locator</h1>
        <input type="text" id="location-input" placeholder="Enter a location">
        <button id="search-button">Search</button>
        <ul id="store-list"></ul>
    </div>
    <div id="map"></div>
</div>
<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD67z0I_Lwb6YM9Gt7xOEcxth0JYRi0SrI&libraries=places" async></script>
<style>
  body, html {
    height: 100%;
    margin: 0;
    font-family: Arial, sans-serif;
}

.container {
    display: flex;
    height: 100%;
}

.sidebar {
    width: 30%;
    padding: 20px;
    background-color: #f8f9fa;
    box-shadow: 0 0 10px rgba(0,0,0,0.1);
    overflow-y: auto;
}

#map {
    width: 70%;
    height: 100%;
}

#location-input {
    width: 100%;
    padding: 10px;
    margin-bottom: 10px;
}

#search-button {
    width: 100%;
    padding: 10px;
    background-color: #007bff;
    color: white;
    border: none;
    cursor: pointer;
}

#search-button:hover {
    background-color: #0056b3;
}

#store-list {
    list-style: none;
    padding: 0;
}

#store-list li {
    margin: 10px 0;
    padding: 10px;
    background-color: #e9ecef;
    border-radius: 5px;
}
</style>
<script>
let map;
let service;
let infowindow;
let autocomplete;

document.addEventListener("DOMContentLoaded", () => {
    const mapOptions = {
        center: { lat: -34.397, lng: 150.644 },
        zoom: 8,
    };
    map = new google.maps.Map(document.getElementById("map"), mapOptions);
    infowindow = new google.maps.InfoWindow();

    // Initialize the autocomplete functionality
    const input = document.getElementById("location-input");
    autocomplete = new google.maps.places.Autocomplete(input);

    // Add listener to the autocomplete to handle place selection
    autocomplete.addListener('place_changed', onPlaceChanged);

    document.getElementById("search-button").addEventListener("click", () => {
        const location = document.getElementById("location-input").value;
        searchStores(location);
    });
});

function onPlaceChanged() {
    const place = autocomplete.getPlace();
    if (place.geometry) {
        const location = place.geometry.location;

        map.setCenter(location);
        map.setZoom(12);

        const nearbySearchRequest = {
            location: location,
            radius: 5000,
            type: ["store"],
        };

        service = new google.maps.places.PlacesService(map);
        service.nearbySearch(nearbySearchRequest, (nearbyResults, nearbyStatus) => {
            if (nearbyStatus === google.maps.places.PlacesServiceStatus.OK && nearbyResults) {
                displayStores(nearbyResults);
            }
        });
    } else {
        alert("Please select a location from the suggestions.");
    }
}

function searchStores(location) {
    const request = {
        query: location,
        fields: ["name", "geometry"],
    };

    service = new google.maps.places.PlacesService(map);
    service.findPlaceFromQuery(request, (results, status) => {
        if (status === google.maps.places.PlacesServiceStatus.OK && results) {
            const place = results[0];
            const location = place.geometry.location;

            map.setCenter(location);
            map.setZoom(12);

            const nearbySearchRequest = {
                location: location,
                radius: 5000,
                type: ["store"],
            };

            service.nearbySearch(nearbySearchRequest, (nearbyResults, nearbyStatus) => {
                if (nearbyStatus === google.maps.places.PlacesServiceStatus.OK && nearbyResults) {
                    displayStores(nearbyResults);
                }
            });
        }
    });
}

function displayStores(stores) {
    const storeList = document.getElementById("store-list");
    storeList.innerHTML = "";

    stores.forEach(store => {
        const li = document.createElement("li");
        li.textContent = store.name;
        storeList.appendChild(li);

        const marker = new google.maps.Marker({
            map: map,
            position: store.geometry.location,
        });

        marker.addListener("click", () => {
            infowindow.setContent(store.name);
            infowindow.open(map, marker);
        });
    });
}
</script>