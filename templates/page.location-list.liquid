<div id="container">
  <div class="content">
    <input id="autocomplete" placeholder="Enter a location" type="text" />
    <button onclick="useCurrentLocation()">Use Current Location</button>
    <div id="store-list"></div>
  </div>
  <div id="map"></div>
</div>

<style>
        #container {
            display: flex;
        }
        #store-list {
            width: 100%;
            height: 100vh;
            overflow-y: auto;
        }
        #map {
            width: 70%;
            height: 100vh;
        }
        .closed {
            color: red;
        }
        .open {
            color: green;
        }
    </style>
    <script>
        let map;
        let service;
        let infowindow;
        let markers = [];
        let autocomplete;

        function initMap() {
            const initialLocation = new google.maps.LatLng(-27.4698, 153.0251);
            const allStore = new google.maps.LatLng(0, 0);
          
            map = new google.maps.Map(document.getElementById('map'), {
                center: initialLocation,
                zoom: 5,
                mapId: "DEMO_MAP_ID"
            });

            infowindow = new google.maps.InfoWindow();
            autocomplete = new google.maps.places.Autocomplete(document.getElementById('autocomplete'));

            autocomplete.bindTo('bounds', map);

            autocomplete.addListener('place_changed', function() {
                const place = autocomplete.getPlace();
                if (!place.geometry) {
                    window.alert("No details available for input: '" + place.name + "'");
                    return;
                }

                map.setCenter(place.geometry.location);
                searchNearby(place.geometry.location);
            });

            searchAllStores();
        }

        function searchAllStores() {
            const request = {
                query: 'SkinKandy'
            };

            service = new google.maps.places.PlacesService(map);
            service.textSearch(request, handleSearchResults);
        }

        function searchNearby(location) {
              const request = {
                  location: location,
                  radius: '5000',
                  name: 'SkinKandy',
                  bounds: map.getBounds()
              };
  
              service = new google.maps.places.PlacesService(map);
              service.nearbySearch(request, handleSearchResults);
          }

        function searchNearby(location) {
            const request = {
                location: location,
                radius: '5000',
                name: 'SkinKandy'
            };

            service = new google.maps.places.PlacesService(map);
            service.nearbySearch(request, handleSearchResults);
        }

        function handleSearchResults(results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                const storeList = document.getElementById('store-list');
                storeList.innerHTML = '';

                clearMarkers();

                for (let i = 0; i < results.length; i++) {
                    createMarker(results[i], i);
                    addToList(results[i], i);
                }
            }
        }

        function createMarker(place, index) {
            const marker = new google.maps.marker.AdvancedMarkerElement({
                map: map,
                position: place.geometry.location,
                title: place.name
            });

            markers.push(marker);

            google.maps.event.addListener(marker, 'click', function() {
                infowindow.setContent(place.name + '<br>' + getOpenStatus(place));
                infowindow.open(map, marker);
            });
        }

        function addToList(place, index) {
            const storeList = document.getElementById('store-list');
            const listItem = document.createElement('div');
            listItem.innerHTML = `${index + 1}. ${place.name}<br>${getOpenStatus(place)}`;
            listItem.style.cursor = 'pointer';
            listItem.addEventListener('click', () => {
                map.setCenter(place.geometry.location);
                map.setZoom(18);
                infowindow.setContent(place.name + '<br>' + getOpenStatus(place));
                infowindow.open(map, markers[index]);
            });
            storeList.appendChild(listItem);
        }

        function getOpenStatus(place) {
            console.log(place);
            if (!place.opening_hours || !place.opening_hours.weekday_text) {
                return 'Opening hours not available';
            }

            const now = new Date();
            const dayOfWeek = now.getDay(); // 0 = Sunday, 1 = Monday, etc.
            const todayHours = place.opening_hours.weekday_text[dayOfWeek];
            
            if (!todayHours) {
                return 'Opening hours not available for today';
            }

            const [day, hours] = todayHours.split(': ');
            const [openTime, closeTime] = hours.split(' â€“ '); // Adjust this based on your expected time format

            const open = new Date();
            open.setHours(parseInt(openTime.split(':')[0]), parseInt(openTime.split(':')[1]), 0);
            const close = new Date();
            close.setHours(parseInt(closeTime.split(':')[0]), parseInt(closeTime.split(':')[1]), 0);

            if (now >= open && now <= close) {
                return `<span class="open">Open until ${closeTime}</span>`;
            } else {
                return `<span class="closed">Closed</span>`;
            }
        }

        function clearMarkers() {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers = [];
        }

        function useCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                    map.setCenter(userLocation);
                    searchNearby(userLocation);
                });
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }
    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD67z0I_Lwb6YM9Gt7xOEcxth0JYRi0SrI&loading=async&libraries=places,marker&callback=initMap" defer></script>