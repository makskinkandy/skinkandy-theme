<div id="container">
    <div id="store-list"></div>
    <div id="map"></div>
</div>
<button onclick="useCurrentLocation()">Use Current Location</button>
<style>
        #container {
            display: flex;
        }
        #store-list {
            width: 30%;
            height: 100vh;
            overflow-y: auto;
        }
        #map {
            width: 70%;
            height: 100vh;
        }
    </style>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyD67z0I_Lwb6YM9Gt7xOEcxth0JYRi0SrI&libraries=places,marker" defer></script>
    <script>
        let map;
        let service;
        let infowindow;
        let markers = [];

      document.addEventListener("DOMContentLoaded", () => {
        const initialLocation = new google.maps.LatLng(37.7749, -122.4194); // Default location (San Francisco)

            map = new google.maps.Map(document.getElementById('map'), {
                center: initialLocation,
                zoom: 13
            });

            infowindow = new google.maps.InfoWindow();
            searchNearby(initialLocation);
      });

        function searchNearby(location) {
            const request = {
                location: location,
                radius: '5000',
                keyword: '7-Eleven'
            };

            service = new google.maps.places.PlacesService(map);
            service.nearbySearch(request, handleSearchResults);
        }

        function handleSearchResults(results, status) {
            if (status === google.maps.places.PlacesServiceStatus.OK) {
                const storeList = document.getElementById('store-list');
                storeList.innerHTML = '';

                clearMarkers();

                for (let i = 0; i < results.length; i++) {
                    createMarker(results[i], i);
                    addToList(results[i], i);
                }
            }
        }

        function createMarker(place, index) {
            const marker = new google.maps.marker.AdvancedMarkerView({
                map: map,
                position: place.geometry.location,
                title: place.name
            });

            markers.push(marker);

            google.maps.event.addListener(marker, 'click', function() {
                infowindow.setContent(place.name);
                infowindow.open(map, marker);
            });
        }

        function addToList(place, index) {
            const storeList = document.getElementById('store-list');
            const listItem = document.createElement('div');
            listItem.innerHTML = `${index + 1}. ${place.name}`;
            listItem.style.cursor = 'pointer';
            listItem.addEventListener('click', () => {
                map.setCenter(place.geometry.location);
                infowindow.setContent(place.name);
                infowindow.open(map, markers[index]);
            });
            storeList.appendChild(listItem);
        }

        function clearMarkers() {
            for (let i = 0; i < markers.length; i++) {
                markers[i].setMap(null);
            }
            markers = [];
        }

        function useCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition((position) => {
                    const userLocation = new google.maps.LatLng(position.coords.latitude, position.coords.longitude);
                    map.setCenter(userLocation);
                    searchNearby(userLocation);
                });
            } else {
                alert('Geolocation is not supported by this browser.');
            }
        }
    </script>